[
["section-introduction.html", "Evaluation Platform in COPD (EPIC) 1 Introduction", " Evaluation Platform in COPD (EPIC) Ainsleigh Hill University of British Columbia 1 Introduction The Evaluation Platform In COPD (EPIC) was a nationally funded research project with the aim of creating an open-source, publicly available, population-based ‘Whole Disease’ COPD model for epidemiological projections and policy analyses in the Canadian context. It might be helpful to take a look at the EPIC web application before reading further, as this gives a visualization of the package: EPIC Web Application. "],
["section-thestudy.html", "2 The Study 2.1 Background", " 2 The Study The epicR package and application are based on the paper Development and Validation of theEvaluation Platform in COPD (EPIC):A Population-Based Outcomes Modelof COPD for Canada, published in 2019. 2.1 Background The purpose of this study is to model how COPD (Chronic Obstructive Pulmonary Disease) affects a whole population. In social sciences and population health, we often use a dynamic microsimulation model to look at how a disease might affect a population over a period of time. What is a Dynamic Microsimulation? A dynamic microsimulation is a computer model which makes predictions about how a population will be affected by say, a disease, over a set period of time. In the case of EPIC, we wanted to look at the affects of COPD on the Canadian population. To start with, the computer model uses data from the 2001 Canadian Community Health Survey 1.1 to create simulated, or “artificial” people. The survey included information from 105 908 Canadians. The model uses this to create ~ 22.5 million community-dwelling Canadians. As with any real population, the simulated population is constantly changing. We define a change in a simulated individual as an event. Event Afftected By Affects Birth Date None Updates the following parameters: FEV1, Predicted FEV1, weight, pack years COPD Occurrence age, sex, smoking history When COPD occurs, baseline FEV1 value is assigned, as well as an individual-specific FEV1 slope, exacerbation rate, and exacerbation severity probabilities. COPD Exacerbation Start COPD status, age, sex, smoking status Sets the exacerbation status to 1 and assigns an exacerbation-related mortality probability. COPD Exacerbation End exacerbation status Sets the exacerbation status to 0. Death (Background) age, sex, year Removes the individual from the simulation. We combined 12 different studies to look at 6 different aspects of COPD: Demographic and Risk Factor Module COPD Occurrence Module Lung Function Module Exacerbation Module Mortality Module Payoff Module Demographic and Risk Factor Module The Demographic and Risk Factor Module is based on the results from POHEM, which is the dynamic microsimulation model we described previously. This is basically the background data for the simulation. Study Summary Parameters Description Values References Demographic variables and risk factors Sex, age, smoking status, height, weight Show Math Based on Population Health Model Various equations representing baseline 2001 Canadian population (&gt 20 years old) from 2001 CCHS. See Appendix 2. COPD Occurrence Module We used data from the Canadian Cohort of Obstructive Lung Disease (COLD) to assign a binary COPD status to individuals upon their creation. Study Summary Parameters Description Values References COPD prevalence equation Assigns COPD status to simulated individuals at the time of creation Show Math Regression on COLD data \\begin{equation} \\\\ logit(p | sex) = \\beta_{0,sex} + \\beta_{1,sex} * age + \\beta_{2,sex} * packYears \\end{equation} COPD incidence equations Assigns COPD status to simulated individuals who did not have COPD at the time of creation during their time in the model Show Math Stochastic calibration based on COPD prevalence equations \\begin{equation} \\\\ log(hazard | sex) = \\beta_{0,sex} + \\beta_{1,sex} * age + \\beta_{2,sex} * packYears \\end{equation} Lung Function Module Study Summary Parameters Description Values References $FEV_1$ for prevalent cases Baseline $FEV_1$ value for individuals who have COPD at the time of creation Show Math Regression on COLD data \\begin{equation} \\\\ \\mu = \\beta_{0,sex} + \\beta_{1,sex} * age + \\beta_{2,sex} * packYears + \\beta_{3,sex} * height^2 \\\\ FEV_1 | sex \\sim Normal(\\mu, e) \\end{equation} $FEV_1$ at incidence Baseline $FEV_1$ value for individuals who develop COPD during the time in the model Show Math Regression on COLD data \\begin{equation} \\\\ \\mu = \\beta_{0,sex} + \\beta_{1,sex} * age + \\beta_{2,sex} * packYears + \\beta_{3,sex} * height^2 + \\\\ \\beta_{4,sex}*\\dfrac{FEV_1}{FVC*LLN} \\\\ FEV_1 | sex \\sim Normal(\\mu, e) \\end{equation} $FEV_1$ decline over time Models $FEV_1$ at time $t$ (in years) in the future based on a random-intercept, random-slope model Show Math From the Lung Health Study \\begin{equation} \\\\ Y_0 = \\beta_0 + \\beta_1 * age + \\beta_2 * sex + \\beta_3 * weight + \\beta_4 * height + \\beta_5 * height^2 + \\\\ \\beta_6 * smokingStatus + \\beta_7 * age * height^2 \\\\ Y_1 = \\beta_0' + \\beta_1' * age + \\beta_2' * sex + \\beta_3' * weight + \\beta_4' * height + \\beta_5' * height^2 + \\\\ \\beta_6' * smokingStatus + \\beta_7' * age * height^2 \\\\ Y_2 = \\beta_0'' \\\\ \\mu = Y_0 + Y_1 * t + Y_2 * t^2 \\\\ FEV_1 | sex \\sim Normal(\\mu, e) \\end{equation} Predicted $FEV_1$ Calculates predicted $FEV_1$ value, required for determining GOLD severity grades Show Math From NHANES III \\begin{equation} \\\\ FEV_1Predicted = \\beta_0 + \\beta_1 * sex + \\beta_2 * age + \\beta_3 * height^2 \\end{equation} Exacerbation Module In COPD, patients can sometimes experience what are called exacerbations. exacerbation: acute worsening of COPD symptoms; acute means sudden onset, short in duration; COPD symptoms include shortness of breath, wheezing, coughing up mucus, etc. Exacerbation Severity Mild Moderate Severe Very Severe Patient has an intensificationof symptoms but do not require an encounter with the health care system. Patient visits a physician or emergency depart-ment but is not hospitalized. Patient (caregiver) recongizes rapid deterioration in condition, requiring hospitalization. Patient (caregiver) recongizes rapid deterioration in condition, requiring hospitalization in the Intensive Care Unit (ICU). Study Summary Parameters Description Values References Exacerbation Rate Hazard of exacerbation for the $i^{th}$ individual Show Math Pooled estimates from Hoogendoorn et al.; variability estimated from MACRO study \\begin{equation} \\\\ log(hazard) = \\alpha_i + \\beta_0 + \\beta_1 * age + \\beta_2 * GOLD + \\beta_3 * GOLD_3 + \\beta_4 * GOLD_4 \\\\ \\alpha_i \\sim Normal(0, \\nu) \\end{equation} Severity of exacerbation Probability that once an exacerbation occurs for the $i^{th}$ individual, it is at a given level of severity Show Math From Hoogendoorn et al.; and MACRO study \\begin{equation} \\\\ logit( \\pi (S_i &lt k)) = \\alpha_i + \\beta_{0,k} + \\beta_1 * age + \\beta_2 * sex + \\beta_3 * FEV_1 + \\\\ \\beta_4 * smokingStatus + \\beta_5 * packYears + \\beta_6 * BMI \\\\ \\alpha_i \\sim Normal(0, \\nu) \\end{equation} $S_i = $ severity level (0-3) for the $i^{th}$ individual hazard: instantaneous exacerbation rate Mortality Module We categorized death into two categories: death from COPD, and death not from COPD. More formally: COPD-related mortality: Death due to a severe or very severe COPD exacerbation. Background mortality: Death from all other causes (excluding COPD). Study Summary Parameters Description Values References Background mortality rate Death due to non-COPD reasons Show Math Modification of the Canadian life tables; such that the combined sources of mortality match the life table values Canadian life tables with calibration to remove COPD-specific mortality Mortality due to COPD exacerbations Short-term mortality due to severe exacerbations Show Math From Aaron et al. and Flattet et al.. Severe and very severe are dummy-coded variables \\begin{equation} \\\\ logit( p) = \\beta_{0} + \\beta_1 * age + \\beta_2 * severe + \\beta_3 * verySevere \\end{equation} Payoff Module Like any disease, COPD costs money to treat, and is a cost on the healthcare system. Additionally, having COPD can reduce quality of life, which depends on the severity of the diagnosis and number of exacerbations. We define cost and utility, below, and divided each into 2 categories: Parameter Description Sub-Parameters Cost Amount of money required for medical treatment of COPD, in 2015 $CAD. For this study, we only included direct medical costs, e.g. doctor's visits, medication, hospitalization, etc. Indirect costs such as sick days, loss of work, etc. were not included. Maintenance Costs Exacerbation Costs Maintenance These include costs relating to drug acquisition, oxygen therapy, laboratory and diagnostic tests, and clinic visits. All hospital and emergency department visits were assumed to be exacerbation related and were not included in maintenance costs. Costs associated with laboratory and diagnostic tests, drug therapy and clinic visits were assumed to arise during both routine care and the treatment of exacerbations; however, costs were calculated separately. Exacerbation It was assumed that all hospitalisations were due to exacerbations. The overall cost of hospitalisation due to acute exacerbation of COPD was obtained from the Ontario Case Costing Project 2000/2001. This cost included laboratory tests and procedures; physician-related costs and the costs of additional medications at discharge (antibacterials and prednisone) were added separately. Utility Quality of life, with respect to a healthy individual. Health State Utility QALY Health State Utility Health status utility is a way of measuring value of health. It is a number between 0 and 1, with 1 = perfect health and 0 = death. We looked at health utility based on GOLD grades I-IV (we had to pool III/IV due to small sample size). Quality Adjusted Life Year A QALY is a unit of measuring quality of life in one year based on health. 1 QALY = 1 year in perfect health 0.5 QALY = 0.5 years in perfect health, or 1 year in 50% of perfect health For this study, we looked at direct reduction in QALY due to exacerbations. Study Summary Parameters Description Values References Direct maintenance costs of COPD Annual direct medical costs not associated with exacerbations (in 2015 $CAD) Show Math Spencer et al. and Chapman et al. \\begin{equation} \\\\ cost = \\beta_1 * GOLD_1 + \\beta_2 * GOLD_2 + \\beta_3 * GOLD_3 + \\beta_4 * GOLD_4 \\end{equation} Direct costs associated with exacerbations Direct medical costs pertaining to an episode of exacerbation according to its level of severity (in 2015 $CAD) Show Math Mittmann et al. and Canadian Institute of Health Information \\begin{equation} \\\\ cost = \\beta_1 * mild + \\beta_2 * moderate + \\beta_3 * severe + \\\\ \\beta_4 * verySevere \\end{equation} Background utility values in COPD Health state utility values in patients with COPD according to GOLD grades outside of an exacerbation episode Show Math Spencer et al. and Rutten-van Molken et al. \\begin{equation} \\\\ utility = \\beta_1 * GOLD_1 + \\beta_2 * GOLD_2 + \\beta_3 * GOLD_3 + \\beta_4 * GOLD_4 \\end{equation} Reduction in QALY due to exacerbations Two sets of regression coefficients (s=0 and s=1) separately modelled reduction in QALY values for mild/moderate and severe/very severe exacerbations that were dependent on the underlying GOLD grade Show Math Spencer et al. \\begin{equation} \\\\ \\Delta_Q = \\beta_{1,s} * GOLD_1 + \\beta_{2,s} * GOLD_2 + \\beta_{3,s} * GOLD_3 + \\beta_{4,s} * GOLD_4 \\end{equation} Symptoms Module Study Summary Parameters Description Values References Cough Probability of a patient presenting with a cough given that the patient has/has not been diagnosed with COPD Show Math Regression on COLD data \\begin{equation} \\text{sex} = \\begin{cases} 1,& \\text{male } \\\\ 0, & \\text{female} \\end{cases} \\text{COPD} = \\begin{cases} 1,& \\text{patient has COPD } \\\\ 0, & \\text{patient does not have COPD} \\end{cases} \\\\ k = \\begin{cases} 0,& \\text{patient has COPD, male } \\\\ 1,& \\text{patient has COPD, female } \\\\ 2,& \\text{patient does not have COPD, male } \\\\ 3, & \\text{patient does not have COPD, female} \\end{cases} \\\\ logit(p | sex, COPD) = \\beta_{0}^{(k)} + \\beta_{1}^{(k)} * age + \\beta_{2}^{(k)} * smoking + \\beta_{3}^{(k)} * FEV_1 \\end{equation} Phlegm Probability of a patient presenting with phlegm given that the patient has/has not been diagnosed with COPD Show Math Regression on COLD data \\begin{equation} \\text{sex} = \\begin{cases} 1,& \\text{male } \\\\ 0, & \\text{female} \\end{cases} \\text{COPD} = \\begin{cases} 1,& \\text{patient has COPD } \\\\ 0, & \\text{patient does not have COPD} \\end{cases} \\\\ k = \\begin{cases} 0,& \\text{patient has COPD, male } \\\\ 1,& \\text{patient has COPD, female } \\\\ 2,& \\text{patient does not have COPD, male } \\\\ 3, & \\text{patient does not have COPD, female} \\end{cases} \\\\ logit(p | sex, COPD) = \\beta_{0}^{(k)} + \\beta_{1}^{(k)} * age + \\beta_{2}^{(k)} * smoking + \\beta_{3}^{(k)} * FEV_1 \\end{equation} Dyspnea Probability of a patient presenting with dyspnea given that the patient has/has not been diagnosed with COPD Show Math Regression on COLD data \\begin{equation} \\text{sex} = \\begin{cases} 1,& \\text{male } \\\\ 0, & \\text{female} \\end{cases} \\text{COPD} = \\begin{cases} 1,& \\text{patient has COPD } \\\\ 0, & \\text{patient does not have COPD} \\end{cases} \\\\ k = \\begin{cases} 0,& \\text{patient has COPD, male } \\\\ 1,& \\text{patient has COPD, female } \\\\ 2,& \\text{patient does not have COPD, male } \\\\ 3, & \\text{patient does not have COPD, female} \\end{cases} \\\\ logit(p | sex, COPD) = \\beta_{0}^{(k)} + \\beta_{1}^{(k)} * age + \\beta_{2}^{(k)} * smoking + \\beta_{3}^{(k)} * FEV_1 \\end{equation} Wheeze Probability of a patient presenting with a wheeze given that the patient has/has not been diagnosed with COPD Show Math Regression on COLD data \\begin{equation} \\text{sex} = \\begin{cases} 1,& \\text{male } \\\\ 0, & \\text{female} \\end{cases} \\text{COPD} = \\begin{cases} 1,& \\text{patient has COPD } \\\\ 0, & \\text{patient does not have COPD} \\end{cases} \\\\ k = \\begin{cases} 0,& \\text{patient has COPD, male } \\\\ 1,& \\text{patient has COPD, female } \\\\ 2,& \\text{patient does not have COPD, male } \\\\ 3, & \\text{patient does not have COPD, female} \\end{cases} \\\\ logit(p | sex, COPD) = \\beta_{0}^{(k)} + \\beta_{1}^{(k)} * age + \\beta_{2}^{(k)} * smoking + \\beta_{3}^{(k)} * FEV_1 \\end{equation} Diagnosis Module Study Summary Parameters Description Values References COPD Diagnosis Probability of a patient being diagnosed with COPD. Show Math Regression on COLD data \\begin{equation} \\text{sex} = \\begin{cases} 1,& \\text{male } \\\\ 0, & \\text{female} \\end{cases} \\\\ \\text{cough/dyspnea/wheeze/phlegm} = \\begin{cases} 1,& \\text{patient has cough/dyspnea/wheeze/phlegm } \\\\ 0, & \\text{otherwise} \\end{cases} \\\\ \\text{gp} = \\text{number of visits to GP in a year} \\\\ k = \\begin{cases} 0,& \\text{female } \\\\ 1, & \\text{male} \\end{cases} \\\\ logit(p | sex) = \\beta_{0}^{(k)} + \\beta_{1}^{(k)} * age + \\beta_{2}^{(k)} * smoking + \\beta_{3}^{(k)} * FEV_1 + \\beta_4^{(k)}* gp \\\\ + \\beta_{5}^{(k)} * cough + \\beta_{6}^{(k)} * phlegm + \\beta_{7}^{(k)} * dyspnea + \\beta_{8}^{(k)} * wheeze + \\beta_{9}^{(k)} * case \\end{equation} Physician Module Study Summary Parameters Description Values References GP Visits Rate Rate of General Practitioner (GP) visits for COPD and non-COPD patients Show Math Regression on COLD data \\begin{equation} \\text{sex} = \\begin{cases} 1,& \\text{male } \\\\ 0, & \\text{female} \\end{cases} \\\\ \\text{cough/dyspnea/wheeze/phlegm} = \\begin{cases} 1,& \\text{patient has cough/dyspnea/wheeze/phlegm } \\\\ 0, & \\text{otherwise} \\end{cases} \\\\ k = \\begin{cases} 0,& \\text{patient has COPD, male } \\\\ 1,& \\text{patient has COPD, female } \\\\ 2,& \\text{patient does not have COPD, male } \\\\ 3, & \\text{patient does not have COPD, female} \\end{cases} \\\\ \\log(rate) = \\beta_{0}^{(k)} + \\beta_{1}^{(k)} * age + \\beta_{2}^{(k)} * smoking + \\beta_{3}^{(k)} * FEV_1 + \\\\ + \\beta_{4}^{(k)} * cough + \\beta_{5}^{(k)} * phlegm + \\beta_{6}^{(k)} * dyspnea + \\beta_{7}^{(k)} * wheeze \\end{equation} "],
["section-packageinR.html", "3 Using the Package in R 3.1 Installation 3.2 Running the Model 3.3 Figures", " 3 Using the Package in R 3.1 Installation If you do not have R installed on your computer, please go to Appendix 1. Once you have R installed, you can install the epicR package as per the instructions below: Windows 7 or Later Download and Install the latest version of R from https://cran.r-project.org/bin/windows/base/ Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Download and Install the latest version of Rtools from https://cran.r-project.org/bin/windows/Rtools/ Using either an R session in Terminal or in R Studio, install the package devtools: install.packages(&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;aminadibi/epicR&#39;) Mac OS Sierra and Later Download and Install the latest version of R from https://cran.r-project.org/bin/macosx/ Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Install homebrew from https://brew.sh and Xcode developer tools from the App store. Note: Xcode is quite a large file, and needs about 20 GB of storage space to install. The whole process takes about an hour. Open the Terminal and use brew to install llvm: brew install llvm Add the following to your ~/.bash_profile: export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot; And this to your ~/.Rprofile: Sys.setenv(PATH=paste(&quot;/usr/local/opt/llvm/bin&quot;, Sys.getenv(&quot;PATH&quot;), sep=&quot;:&quot;)) Using either an R session in Terminal or in R Studio, install the package devtools: install.packages(&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;resplab/epicR&#39;) Note: If epicR is still not compiling correctly, gfortran needs to be installed separately. In the terminal: brew install gcc Now, by default, R does not look for the HomeBrew version of gcc, so you will need to change this as well. First, you need to find the version of gcc you are using: brew list --versions gcc The first number is {YOUR_GCC_MAIN_VERSION}, and the whole name is {YOUR_GCC_FULL_VERSION}. For example, on my computer, it is: 9.1.0 You will also need the folder name for your gcc, which you will need to log in as sudo to do: sudo cd cd ~/usr/local/lib/gcc/{YOUR_GCC_MAIN_VERSION}/gcc ls The folder name printed out is {YOUR_GCC_TARGET}. For example, on my computer, it is: x86_64-apple-darwin18 In terminal, use your favourite text editor to open the file “~/.R/Makevars”: open ~/.R/Makevars This may open a blank file, or it might have some content already. Somewhere in the file, add the following: CC = gcc-{YOUR_GCC_MAIN_VERSION} CXX = g++-{YOUR_GCC_MAIN_VERSION} FLIBS = -L/usr/local/lib/gcc/{YOUR_GCC_MAIN_VERSION}/gcc/{YOUR_GCC_TARGET}/{YOUR_GCC_FULL_VERSION} -L/usr/local/lib/gcc/{YOUR_GCC_MAIN_VERSION} -lgfortran -lquadmath -lm For example, on my computer it would be: CC = gcc-9 CXX = g++-9 FLIBS = -L/usr/local/lib/gcc/9/gcc/x86_64-apple-darwin18/9.1.0 -L/usr/local/lib/gcc/9 -lgfortran -lquadmath -lm Once you have done this, save the file and close the text editor. You may need to restart RStudio, and try Step 7 again. Ubuntu 16.04 and Later Install R if you don’t have it installed already. See Appendix 1 for installation guide. Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Install libcurl from Terminal: sudo apt-get install libcurl4-openssl-dev libssl-dev Using either an R session in Terminal or in R Studio, install the package devtools: install.packages (&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;resplab/epicR&#39;) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;resplab/epicR&quot;) 3.2 Running the Model Now that you have installed epicR, you can load the library: library(epicR) Step 1: Initialize the Session The backend of this package is in C++. In other languages such as R/Python, memory allocation is taken care of for you. However, in C/C++, you need to allocate memory yourself. You also need to deallocate memory when the program is done. Because of this, we have the function init_session(). init_session() is in the core.R file, and calls 3 C functions: Cdeallocate_resources(), Callocate_resources(), and Cinit_session(). You don’t really need to know how these work, but basically they allocate/deallocate memory. You need to call this before you run anything: init_session() In C++, a program that is successful returns 0, so you should see this in the R console. Step 2: Set the Inputs If you want to set your own input parameters, I will explain how to do so in this section. If you want to use the defaults, you can skip to the next step. The default input values are created in the file input.R. To set your own input values, you can use the function createInput() in the file createInput.R. Below is a list of the parameters you can set: percentFemale timeHorizon costDiscount qalyDiscount baselineAge decimal: between 0 and 1, percentage of population that is female integer: time in years for model decimal: between 0 and 1, percentage which payoffs decrease every year decimal: between 0 and 1, percentage which QALYs decrease every year integer: mean age at baseline To create the inputs: input = createInput(percentFemale = 0.5, timeHorizon = 20, costDiscount = 0.03, qalyDiscount = 0.03, baselineAge = 40) Step 3: Run The run() function has two arguments: max_n_agents and input. If you created your own input in Step 2, you can put it in here; otherwise, you can leave the input argument blank. The max_n_agents argument is how many people you want in your model. The default is set to the maximum integer your computer will allow. On my computer that is 2147483647. You can set this to a lower number if you like (it might run faster). If you want to change the arguments: run(max_n_agents = 1000, input = input) Otherwise: run() Step 4: Results Once you have run the model simulation, there are several functions to access the results. The first function is the get_all_events() function. This function returns the events matrix, with every event for every patient. As you may guess, this matrix can be quite large, depending on how many patients you ran the model with. eventsMatrix = get_all_events() The other two functions are getExResults() and getMainResults(). The getMainResults() shows some of the overall results: n_agents cumul_time n_deaths n_COPD total_exac total_exac_time total_pack_years total_doctor_visit total_cost total_qaly number of people who started in the simulation total number of deaths during the simulation total number of people with COPD by the end of the simulation total number of exacerbations; columns = exacerbation severity total amount of time for exacerbations; columns = exacerbation severity total number of pack years the population smoked during the simulation total cost to the health care system, in adjusted 2015 $CAD total quality-adjusted life years lost (QALY) during the simulation The getExResults() returns a very large list of results: n_alive_by_ctime_sex n_alive_by_ctime_age n_smoking_status_by_ctime n_current_smoker_by_ctime_sex cumul_cost_ctime sum_fev1_ltime cumul_time_by_smoking_status cumul_non_COPD_time sum_p_COPD_by_ctime_sex sum_pack_years_by_ctime_sex sum_age_by_ctime_sex n_death_by_age_sex n_alive_by_age_sex sum_time_by_ctime_sex sum_time_by_age_sex sum_weight_by_ctime_sex number of people alive; rows = years, columns = gender number of people alive; rows = years, columns = age number of people who smoke; rows = years, columns = gender total cost for one year; rows = years total number of deaths (background) during the time period; rows = age, columns = sex total number of people alive at the end of the time period; rows = age, columns = sex n_COPD_by_ctime_sex n_COPD_by_ctime_age n_inc_COPD_by_ctime_age n_COPD_by_ctime_severity n_COPD_by_age_sex n_Diagnosed_by_ctime_sex n_Diagnosed_by_ctime_severity cumul_time_by_ctime_GOLD n_exac_by_ctime_age n_severep_exac_by_ctime_age n_exac_death_by_ctime_age n_exac_death_by_ctime_severity n_exac_death_by_age_sex n_exac_by_ctime_severity n_exac_by_gold_severity n_exac_by_gold_severity_diagnosed total number of people diagnosed with COPD (prevalence); rows = years, columns = sex total number of people diagnosed with COPD (prevalence); rows = years, columns = age number of people diagnosed with COPD (prevalence); rows = years, columns = GOLD status total number of people diagnosed with COPD (prevalence); rows = age, columns = sex n_exac_by_ctime_severity_female n_exac_by_ctime_GOLD n_exac_by_ctime_severity_undiagnosed n_exac_by_ctime_severity_diagnosed n_GPvisits_by_ctime_sex n_GPvisits_by_ctime_severity n_GPvisits_by_ctime_diagnosis n_cough_by_ctime_severity n_phlegm_by_ctime_severity n_wheeze_by_ctime_severity n_dyspnea_by_ctime_severity n_mi n_incident_mi n_mi_by_age_sex n_mi_by_ctime_sex sum_p_mi_by_ctime_sex total number of myocardial infarctions number of myocardial infarctions total number of myocardial infarctions over the time period; rows = age, columns = gender number of myocardial infarctions in a year; rows = years, columns = gender n_stroke n_incident_stroke n_stroke_by_age_sex n_stroke_by_ctime_sex n_hf n_incident_hf n_hf_by_age_sex n_hf n_incident_hf n_hf_by_age_sex n_hf_by_ctime_sex medication_time_by_class n_exac_by_medication_class total number of strokes by all patients over the time period number of strokes over the time period; rows = age, columns = sex number of heart failures As the getExResults() function returns a very large list, we have broken them down into the different modules. Cardiovascular Module Number Sum Stroke Incident Stroke Myocardial Infarction Inicident Myocardial Infarction Heart Failure Incident Heart Failure Age Time Sex Age Time Sex n_ Total number of agents/individuals/people sum_ stroke incident_stroke mi incident_mi hf incident_hf _by_age Age in years; rows = age _by_ctime Time of simulation in years; rows = time _by_sex Sex of agent, either \"male\" or \"female\"; rows = sex _age Age in years; columns = age _ctime Time of simulation in years; columns = time _sex Sex of agent, either \"male\" or \"female\"; columns = sex Physician Module Number Sum GP Visits Dyspnea Cough Wheeze Phlegm Severity Time Sex Age Time Sex Diagnosis n_ Total number of agents/individuals/people sum_ GPvisits dyspnea cough wheeze phlegm _by_age Age in years; rows = age _by_ctime Time of simulation in years; rows = time _by_sex Sex of agent, either \"male\" or \"female\"; rows = sex _age Age in years; columns = age _ctime Time of simulation in years; columns = time _sex Sex of agent, either \"male\" or \"female\"; columns = sex _sex Sex of agent, either \"male\" or \"female\"; columns = sex _diagnosis Exacerbation Module Number Sum Exacerbations Exacerbation Death Severe Exacerbations Age Time Sex Age Time Sex Severity n_ Total number of agents/individuals/people sum_ exac exac_death severep_exac _by_age Age in years; rows = age _by_ctime Time of simulation in years; rows = time _by_sex Sex of agent, either \"male\" or \"female\"; rows = sex _age Age in years; columns = age _ctime Time of simulation in years; columns = time _sex Sex of agent, either \"male\" or \"female\"; columns = sex _severity Severity of exacerbation; columns = severity extendedResults = getExResults() mainResults = getMainResults() Both functions return quite a long list of results, and as this package is in continuous development, I will refer you to the documentation in the R package for more details of how these functions work: ??getExResults ??getMainResults 3.3 Figures We have created some figures and charts for users, although they are not exhaustive, so you may want to create your own figures as well. Exacerbation Charts To look at total number of exacerbations and exacerbation rate, we have the function plotExacerbations(). nPatients argX argY groupBy exacType perCapita number of patients/agents/individuals to simulate string: one of \"year\" string: one of \"exacerbation_rate\", \"number_of_exacerbations\" string: one of \"sex\", \"age\", \"gold\" string: \"all\" or \"severe\" numeric: if null, parameter is ignored, otherwise, population size to look at We can look at total number of exacerbations by age group: plotExacerbations(nPatients = 1e4, argX = &quot;year&quot;, argY = &quot;number_of_exacerbations&quot;, groupBy = &quot;age&quot;, exacType = &quot;all&quot;, perCapita = NULL) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session We can also look at the exacerbation rate by sex: plotExacerbations(nPatients = 1e4, argX = &quot;year&quot;, argY = &quot;exacerbation_rate&quot;, groupBy = &quot;sex&quot;, exacType = &quot;all&quot;, perCapita = NULL) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session plotExacerbations(nPatients = 1e4, argX = &quot;year&quot;, argY = &quot;exacerbation_rate&quot;, groupBy = &quot;sex&quot;, exacType = &quot;severe&quot;, perCapita = NULL) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session COPD Occurrence Charts To look at COPD incidence and prevalence, we have the function plotCOPD(). nPatients argX argY aggregateBy groupBy perCapita number of patients/agents/individuals to simulate string: one of \"year\", \"age\" string: one of \"incidence\", \"prevalence\" string: one of \"age\", \"none\" string: one of \"sex\", \"age\", \"gold\" numeric: if null, parameter is ignored, otherwise, population size to look at We can look at COPD incidence by age: plotCOPD(10000, argX=&quot;age&quot;, argY=&quot;incidence&quot;, aggregateBy=&quot;none&quot;, groupBy=&quot;none&quot;) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session We can look at COPD incidence by age group: plotCOPD(10000, argX=&quot;age&quot;, argY=&quot;incidence&quot;, aggregateBy=&quot;age&quot;, groupBy=&quot;none&quot;) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session We can look at COPD incidence by year and sex: plotCOPD(10000, argX=&quot;year&quot;, argY=&quot;incidence&quot;, aggregateBy=&quot;none&quot;, groupBy=&quot;sex&quot;) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session &gt; No id variables; using all as measure variables &gt; No id variables; using all as measure variables We can also look at COPD prevalence by age: plotCOPD(10000, argX=&quot;age&quot;, argY=&quot;prevalence&quot;, aggregateBy=&quot;none&quot;, groupBy=&quot;none&quot;) &gt; Initializing the session &gt; [1] 0 &gt; [1] 0 &gt; Terminating the session "],
["section-webapp.html", "4 Using the Web Application", " 4 Using the Web Application We have created a web application which can be found here: EPIC Web Application "],
["section-using-the-package-as-an-api-prism.html", "5 Using the Package as an API (PRISM) 5.1 PRISM API in Excel 5.2 API in R/Javascript/Python/Bash", " 5 Using the Package as an API (PRISM) PRISM (Programmable Interface for Simulation/Statistical Models) is a package which provides a user-friendly API interface in R for clinical prediction and decision analytics models hosted on UBC PRISM cloud. For more information, the PRISM package can be found on GitHub at PRISM on GitHub. 5.1 PRISM API in Excel One of the primary goals of PRISM is making prediction models accessible to a wide range of audiences, including those with less programming experience. The Excel API is targetted towards users who are less familiar with programming, or users who are familiar with programming and would like an easy way to extract the data quickly. To use the model, you will need to have Excel installed on your computer. Currently, the Excel API only works in Windows (PC), although we are working on developing a version for Mac (OS X) as well. Downloading the Spreadsheet To get started, you will need to go to: PRISM Model Repository. In the row that has the EPIC model, go to the column labelled Excel Interface and click on the link EPIC Excel (PC). This will download the Excel Interface for the EPIC model. Setting the Inputs Once you have downloaded the Excel Interface, you can open it in Excel. You will notice there are 7 sheets, labelled Intro, Settings, Input - Main Parameters, Input - Agent Characteristics, Output - Main Outcomes , Output - Exacerbations, and Output - Severity. You can click on the Intro tab for more information on how to use the Excel API. The Settings tab you don’t need to use. There are 2 input tabs. Click on Input - Main Parameters. The first table contains global parameters. You may change these if you like, or leave the default values: Number of agents Baseline age Time horizon Discount rate for costs Number of people to be included in the dynamic microsimulation. Minimum age of people to be included. Default is set to 40 years old. Number of years to run the simulation for. The second table contains the parameters for the Payoff Module. Running the Model To run the model, you need to connect to the model first. Click on the Output - Main Outcomes sheet. There is a button at the top of the page which says Connect to Model. Click on that button. On the bottom left of the Excel window, you should see the text “Connecting to model…” Click on the Run button. Click on the Disconnect from Model button once it has finished running. Results Once you have run the model, there are 3 sheets with charts to look at the results: Output - Main Outcomes, Output - Exacerbations, and Output - Severity. 5.2 API in R/Javascript/Python/Bash To get started, you will need to install a few packages: brew install curl sudo apt install curl install.packages(\"devtools\") devtools::install_github(\"resplab/prism\") pip3 install requests The next step is to get an API key. For now, we will be giving out API keys on a case-by-case basis, so please email either: Amin Adibi: amin.adibi@ubc.ca Mohsen Sadatsafavi: mohsen.sadatsafavi@ubc.ca GET curl -X GET http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/samplePatients/json curl -X GET http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/samplePatients/json request = new XMLHttpRequest(); request.open('GET', 'http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/samplePatients/json' ); request.send(); library(prism) connect_to_model('epicPrism', api_key = YOUR_API_KEY) patient1 = accept::samplePatients[1,] model_run(patient1) res = as.data.frame(model_run(patient1)) import json import requests response = requests.get(\"http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/samplePatients/json\") POST curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[YOUR_API_KEY],\"func\":[\"prism_model_run\"], \"model_input\":[{\"ID\":\"10001\",\"male\":1,\"age\":70,\"smoker\":1,\"FEV1\":2.5,\"height\":1.68,\"weight\":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[YOUR_API_KEY],\"func\":[\"prism_model_run\"], \"model_input\":[{\"ID\":\"10001\",\"male\":1,\"age\":70,\"smoker\":1,\"FEV1\":2.5,\"height\":1.68,\"weight\":65}]}' http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/gateway/json curl -Body '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"],\"model_input\":[{\"ID\":\"10001\",\"male\":1,\"age\":70,\"smoker\":1,\"FEV1\":2.5,\"height\":1.68,\"weight\":65}]}' -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/gateway/json -Headers @{\"Content-type\"=\"application/json\"} let patient = JSON.stringify({ api_key: 'YOUR_API_KEY', func: [\"prism_model_run\"], model_input: [{ ID: 10001, male: 1, age: 70, smoker: 1, FEV1: 2.5, height: 1.68, weight: 65 }] }); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(patient); let results = request.response; library(prism) connect_to_model('epicPrism', api_key = YOUR_API_KEY) patient1 = epic::samplePatients[1,] model_run(patient1) res = as.data.frame(model_run(patient1)) api_key = 'YOUR_API_KEY' patientInput = [{ \"ID\":\"10001\", \"male\":1, \"age\":70, \"smoker\":1, \"FEV1\":2.5, \"height\":1.68, \"weight\":65 }] response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/epicPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"prism_model_run\"], \"model_input\": patientInput}) print(response) results = json.loads(response.text) print(results) "],
["section-appendix1.html", "6 Appendix 1: Installing R 6.1 Step 1: Mirrors 6.2 Mac OS X 6.3 Windows 6.4 Ubuntu", " 6 Appendix 1: Installing R This is a guide to installing R, geared mainly at beginner audiences. All the information below can be found at https://www.r-project.org/; I’ve just simplified it a bit. 6.1 Step 1: Mirrors When you go the the R home page, you will see a link to download R, which will take you to a list of mirrors. They are organized by country, so click on one that is close to your location. Since our group is based out of Vancouver, I will select one of the mirrors in Canada: SFU Mirror. Once you have clicked on the closest mirror, you will be asked to choose what type of computer you have. 6.2 Mac OS X If you are using a Mac (Apple) computer, click on the link for Mac OS X. You will be redirected to a page that says “R for Mac OS X.” To install R, you want to click on one of the files ending in “.pkg”. If your operating system is fairly up-to-date, scroll to “Latest Release” and click on the file that looks like “R-3.X.Y.pkg,” with X and Y being numbers for the latest release. R should begin downloading, and your Mac package manager will pop up with the rest of the instructions. If your operating system is older, you might want to scroll down to “Legacy Releases,” and download one of those “.pkg” files instead. It should tell you on the page what version your computer should use. 6.3 Windows If you are using Windows, click on the link for Windows. You will be redirected to a page that says “R for Windows.” To install R, click on the link “base,” and on the next page, “Download R 3.X.Y for Windows,” where X and Y are the version numbers for the latest release. R should begin downloading. 6.4 Ubuntu First, check which Ubuntu version you are using in Terminal: lsb_release -a {YOUR_UBUNTU_VERSION} is the Codename given. For example, on my computer it would be bionic. Open the /etc/apt/sources.list file: sudo gedit /etc/apt/sources.list For R 3.6 paste the following in the file: deb https://cloud.r-project.org/bin/linux/ubuntu {YOUR_UBUNTU_VERSION}-cran35/ On my computer, this would be: deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/ Install R: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo apt-get update sudo apt-get install r-base "]
]
