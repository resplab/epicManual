[
["section-introduction.html", "Exacerbation Platform in COPD (EPIC) 1 Introduction", " Exacerbation Platform in COPD (EPIC) Ainsleigh Hill University of British Columbia 1 Introduction The Evaluation Platform In COPD (EPIC) was a nationally funded research project with the aim of creating an open-source, publicly available, population-based ‘Whole Disease’ COPD model for epidemiological projections and policy analyses in the Canadian context. It might be helpful to take a look at the EPIC web application before reading further, as this gives a visualization of the package: EPIC Web Application. "],
["section-thestudy.html", "2 The Study", " 2 The Study "],
["section-packageinR.html", "3 Using the Package in R 3.1 Installation", " 3 Using the Package in R 3.1 Installation If you do not have R installed on your computer, please go to Appendix 1. Once you have R installed, you can install the epicR package as per the instructions below: Windows 7 or Later Download and Install the latest version of R from https://cran.r-project.org/bin/windows/base/ Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Download and Install the latest version of Rtools from https://cran.r-project.org/bin/windows/Rtools/ Using either an R session in Terminal or in R Studio, install the package devtools: install.packages(&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;aminadibi/epicR&#39;) Mac OS Sierra and Later Download and Install the latest version of R from https://cran.r-project.org/bin/macosx/ Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Install homebrew from https://brew.sh and Xcode developer tools from the App store. Open the Terminal and use brew to install llvm: brew install llvm Add the following to your ~/.bash_profile: export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot; And this to your ~/.Rprofile: Sys.setenv(PATH=paste(&quot;/usr/local/opt/llvm/bin&quot;, Sys.getenv(&quot;PATH&quot;), sep=&quot;:&quot;)) Using either an R session in Terminal or in R Studio, install the package devtools: install.packages(&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;resplab/epicR&#39;) Note: If epicR is still not compiling correctly, gfortran needs to be installed separately. In the terminal: brew install gcc Now, by default, R does not look for the HomeBrew version of gcc, so you will need to change this as well. First, you need to find the version of gcc you are using: brew list --versions gcc The first number is {YOUR_GCC_MAIN_VERSION}, and the whole name is {YOUR_GCC_FULL_VERSION}. For example, on my computer, it is: 9.1.0 You will also need the folder name for your gcc, which you will need to log in as sudo to do: sudo cd cd ~/usr/local/lib/gcc/{YOUR_GCC_MAIN_VERSION}/gcc ls The folder name printed out is {YOUR_GCC_TARGET}. For example, on my computer, it is: x86_64-apple-darwin18 In terminal, use your favourite text editor to open the file “~/.R/Makevars”: open ~/.R/Makevars This may open a blank file, or it might have some content already. Somewhere in the file, add the following: CC = gcc-{YOUR_GCC_MAIN_VERSION} CXX = g++-{YOUR_GCC_MAIN_VERSION} FLIBS = -L/usr/local/lib/gcc/{YOUR_GCC_MAIN_VERSION}/gcc/{YOUR_GCC_TARGET}/{YOUR_GCC_FULL_VERSION} -L/usr/local/lib/gcc/{YOUR_GCC_MAIN_VERSION} -lgfortran -lquadmath -lm For example, on my computer it would be: CC = gcc-9 CXX = g++-9 FLIBS = -L/usr/local/lib/gcc/9/gcc/x86_64-apple-darwin18/9.1.0 -L/usr/local/lib/gcc/9 -lgfortran -lquadmath -lm Once you have done this, save the file and close the text editor. You may need to restart RStudio, and try Step 7 again. Ubuntu 16.04 and Later Install R by executing the following commands in Terminal: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo add-apt-repository &#39;deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/&#39; sudo apt-get update sudo apt-get install r-base If the installation is successful, you should be able to start R: sudo -i R Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Install libcurl from Terminal: sudo apt-get install libcurl4-openssl-dev libssl-dev Using either an R session in Terminal or in R Studio, install the package devtools: install.packages (&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;resplab/epicR&#39;) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;resplab/epicR&quot;) "],
["section-webapp.html", "4 Using the Web Application", " 4 Using the Web Application We have created a web application which can be found here: EPIC Web Application "],
["section-using-the-package-as-an-api-prism.html", "5 Using the Package as an API (PRISM) 5.1 R API 5.2 Shell/Bash API 5.3 Python API 5.4 Javascript API", " 5 Using the Package as an API (PRISM) PRISM (Programmable Interface for Simulation/Statistical Models) is a package which provides a user-friendly API interface in R for clinical prediction and decision analytics models hosted on UBC PRISM cloud. For more information, the PRISM package can be found on GitHub at PRISM on GitHub. 5.1 R API To install PRISM in R, you will need to install it from GitHub. In an R Console: devtools::install_github(&quot;resplab/prism&quot;) To use PRISM in R: library(prism) connect_to_model(&quot;acceptPrism&quot;, api_key = your_api_key) patient1 &lt;- accept::samplePatients[1,] model_run(patient1) res &lt;- as.data.frame(model_run(patient1)) 5.2 Shell/Bash API 5.2.1 Linux You will need curl installed to use the API. To check if you have curl: dpkg -l curl If you do not have curl, you can install it by: sudo apt install curl curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;api_key&quot;:[&quot;YOUR_API_KEY&quot;],&quot;func&quot;:[&quot;prism_model_run&quot;],&quot;model_input&quot;:[{&quot;ID&quot;: &quot;10001&quot;, &quot;male&quot;: 1, &quot;age&quot;: 70, &quot;smoker&quot;: 1, &quot;oxygen&quot;: 1, &quot;statin&quot;: 1, &quot;LAMA&quot;: 1, &quot;LABA&quot;: 1, &quot;ICS&quot;: 1, &quot;FEV1&quot;: 33, &quot;BMI&quot;: 25, &quot;SGRQ&quot;: 50, &quot;LastYrExacCount&quot;: 2, &quot;LastYrSevExacCount&quot;: 1, &quot;randomized_azithromycin&quot;: 0, &quot;randomized_statin&quot;: 0, &quot;randomized_LAMA&quot;: 0, &quot;randomized_LABA&quot;: 0, &quot;randomized_ICS&quot;: 0}]}&#39; http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json 5.2.2 Mac OS You will need curl installed to use the API. To check if you have curl: brew list curl If you do not have curl, you can install it using HomeBrew: brew install curl curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;api_key&quot;:[&quot;YOUR_API_KEY&quot;],&quot;func&quot;:[&quot;prism_model_run&quot;],&quot;model_input&quot;:[{&quot;ID&quot;: &quot;10001&quot;, &quot;male&quot;: 1, &quot;age&quot;: 70, &quot;smoker&quot;: 1, &quot;oxygen&quot;: 1, &quot;statin&quot;: 1, &quot;LAMA&quot;: 1, &quot;LABA&quot;: 1, &quot;ICS&quot;: 1, &quot;FEV1&quot;: 33, &quot;BMI&quot;: 25, &quot;SGRQ&quot;: 50, &quot;LastYrExacCount&quot;: 2, &quot;LastYrSevExacCount&quot;: 1, &quot;randomized_azithromycin&quot;: 0, &quot;randomized_statin&quot;: 0, &quot;randomized_LAMA&quot;: 0, &quot;randomized_LABA&quot;: 0, &quot;randomized_ICS&quot;: 0}]}&#39; http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json 5.2.3 Windows PowerShell In PowerShell: curl -Body &#39;{&quot;api_key&quot;:[&quot;YOUR_API_KEY&quot;],&quot;func&quot;:[&quot;prism_model_run&quot;],&quot;model_input&quot;:[{&quot;ID&quot;: &quot;10001&quot;, &quot;male&quot;: 1, &quot;age&quot;: 70, &quot;smoker&quot;: 1, &quot;oxygen&quot;: 1, &quot;statin&quot;: 1, &quot;LAMA&quot;: 1, &quot;LABA&quot;: 1, &quot;ICS&quot;: 1, &quot;FEV1&quot;: 33, &quot;BMI&quot;: 25, &quot;SGRQ&quot;: 50, &quot;LastYrExacCount&quot;: 2, &quot;LastYrSevExacCount&quot;: 1, &quot;randomized_azithromycin&quot;: 0, &quot;randomized_statin&quot;: 0, &quot;randomized_LAMA&quot;: 0, &quot;randomized_LABA&quot;: 0, &quot;randomized_ICS&quot;: 0}]}&#39; -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json -Headers @{&quot;Content-type&quot;=&quot;application/json&quot;} 5.3 Python API For this, we are assuming the use of Python 3. To get started, you will need to import the json and requests libraries. To install, open a terminal: pip3 install requests We will start with the GET request. If everything is working, this should return 200 as a response. import json import requests response = requests.get(&quot;http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json&quot;) print(response) For the POST request, we will send some patient data to the API, and should get a prediction back from the API. api_key = &#39;YOUR_API_KEY&#39; patientInput = [{ &quot;ID&quot;: &quot;10001&quot;, &quot;male&quot;: 1, &quot;age&quot;: 70, &quot;smoker&quot;: 1, &quot;oxygen&quot;: 1, &quot;statin&quot;: 1, &quot;LAMA&quot;: 1, &quot;LABA&quot;: 1, &quot;ICS&quot;: 1, &quot;FEV1&quot;: 33, &quot;BMI&quot;: 25, &quot;SGRQ&quot;: 50, &quot;LastYrExacCount&quot;: 2, &quot;LastYrSevExacCount&quot;: 1, &quot;randomized_azithromycin&quot;: 0, &quot;randomized_statin&quot;: 0, &quot;randomized_LAMA&quot;: 0, &#39;randomized_LABA&quot;: 0, &quot;randomized_ICS&quot;: 0 }] response = requests.post(&quot;http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json&quot;, json = {&quot;api_key&quot;:[api_key], &quot;func&quot;: [&quot;prism_model_run&quot;], &quot;model_input&quot;: patientInput}) print(response) results = json.loads(response.text) print(results) We will put the results in a dictionary: To visualize the results using the package PrettyTable: 5.4 Javascript API To use the PRISM API in Javascript, you will need to use the XMLHttpRequest module. We will start by sending a GET request: request = new XMLHttpRequest(); request.open(&#39;GET&#39;, &#39;http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json&#39;); request.send(); The onreadystatechange is an XMLHttpRequest event which updates when the ready state changes. The ready state can be either 1, 2, 3, or 4. &gt; null device &gt; 1 Ready State Description 0 Unsent 1 Opened: open() has been called 2 Headers Received: send() has been called and headers are available 3 Loading: downloading; responseText holds partial data 4 Done: the operation is complete request.onreadystatechange = function() { if(request.readyState === 4) { // if(request.status === 200) { console.log(request.responseText); } else { console.log(request.status); } } } To get a prediction, we can send a POST request. We will first create an example patient using json: let patient = JSON.stringify({ api_key: YOUR_API_KEY, func: [&quot;prism_model_run&quot;], model_input: [{ ID: 10001, male: 1, age: 70, smoker: 1, oxygen: 1, statin: 1, LAMA: 1, LABA: 1, ICS: 1, FEV1: 33, BMI: 25, SGRQ: 50, LastYrExacCount: 2, LastYrSevExacCount: 1, randomized_azithromycin: 0, randomized_statin: 0, randomized_LAMA: 0, randomized_LABA: 0, randomized_ICS: 0 }] }); We need to set the request header to json, and then send our patient json to the PRISM server using the request.send() function. request.open(&#39;POST&#39;, &#39;http://prism.resp.core.ubc.ca/ocpu/library/acceptPrism/R/gateway/json&#39;); request.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;); request.send(patient); // Send request let results = request.response; "],
["section-appendix1.html", "6 Appendix 1: Installing R 6.1 Step 1: Mirrors 6.2 Mac OS X 6.3 Windows", " 6 Appendix 1: Installing R This is a guide to installing R, geared mainly at beginner audiences. All the information below can be found at https://www.r-project.org/; I’ve just simplified it a bit. 6.1 Step 1: Mirrors When you go the the R home page, you will see a link to download R, which will take you to a list of mirrors. They are organized by country, so click on one that is close to your location. Since our group is based out of Vancouver, I will select one of the mirrors in Canada: SFU Mirror. Once you have clicked on the closest mirror, you will be asked to choose what type of computer you have. 6.2 Mac OS X If you are using a Mac (Apple) computer, click on the link for Mac OS X. You will be redirected to a page that says “R for Mac OS X.” To install R, you want to click on one of the files ending in “.pkg”. If your operating system is fairly up-to-date, scroll to “Latest Release” and click on the file that looks like “R-3.X.Y.pkg,” with X and Y being numbers for the latest release. R should begin downloading, and your Mac package manager will pop up with the rest of the instructions. If your operating system is older, you might want to scroll down to “Legacy Releases,” and download one of those “.pkg” files instead. It should tell you on the page what version your computer should use. 6.3 Windows If you are using Windows, click on the link for Windows. You will be redirected to a page that says “R for Windows.” To install R, click on the link “base,” and on the next page, “Download R 3.X.Y for Windows,” where X and Y are the version numbers for the latest release. R should begin downloading. "]
]
